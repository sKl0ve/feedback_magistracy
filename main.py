import telebot
import sqlite3
import whisper
import requests
import os
from telebot import types


SPECIALIZATIONS = {
    "01.04.03_04" : "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–¥–æ–±—ã—á–∏",
    "01.04.03_06" : "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–∑–∏–∫–æ-–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª–∏–º–µ—Ä–æ–≤ –∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ–≤",
    "09.04.04_04" : "–ò–¢ ‚Äì –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
    "10.04.01_04" : "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –æ—Ç—Ä–∞—Å–ª–∏",
    "38.04.01_30" : "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ò–¢ –∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑"
}
GROUPS = {
    "01.04.03_04" : {},
    "01.04.03_06" : {},
    "09.04.04_04" : {"1_course" : "5140904/40401", "2_course" : "5140904/30401"},
    "10.04.01_04" : {},
    "38.04.01_30" : {},
}
DISCIPLINES = {"1" : ['–ò–Ω.—è–∑. –≤ –ø—Ä–æ—Ñ. –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –ù–ò', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏', '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ —Å–∏—Å—Ç–µ–º', '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ò–¢ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã', '–ò–¢ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ü–ü', '–û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞'],
               "2" : [], 
               "3" : [], 
               "4" : []
}
QUESTIONS_EDUCATION = {
    "question1" : {"–û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞" : 
        {"answer1" : "1", 
         "answer2" : "2", 
         "answer3" : "3", 
         "answer4" : "4", 
         "answer5" : "5"}},
    "question2" : {"–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –≤–∞—à–µ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" : {"answer1" : "1", "answer2" : "2", "answer3" : "3", "answer4" : "4", "answer5" : "5"}},
    "question3" : {"–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã" : {"answer1" : "1", "answer2" : "2", "answer3" :  "3","answer4" :  "4","answer5" :  "5"}},
    "question4" : {"–û—Ü–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ" : {"answer1" : "C–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ", "answer2" : "–ú–µ–Ω—è —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", "answer3" : "C–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ"}},
    "question5" : {"–û—Ü–µ–Ω–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π" : {"answer1" : "–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", "answer2" : "–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç", "answer3" : "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"}}
}
QUESTIONS_PRACTICE = {
    "question1" : {"–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤–∞—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞" : {"ans1" : "1", "ans2" : "2", "ans3" : "3", "ans4" : "4", "ans5" : "5"}},
    "question2" : {"–û—Ü–µ–Ω–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤–∞—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–º–ø–∞–Ω–∏–∏" : {"ans1" : "1", "ans2" : "2", "ans3" : "3", "ans4" : "4", "ans5" : "5"}},
    "question3" : {"–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏" : {"ans1" : "1", "ans2" : "2", "ans3" : "3", "ans4" : "4", "ans5" : "5"}},
    "question4" : {"–°–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é" : {"ans1" : "–û–∂–∏–¥–∞–ª –±–æ–ª—å—à–µ–≥–æ", "ans2" : "–°–æ–≤–ø–∞–¥–∞—é—Ç", "ans3" : "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è"}},
    "question5" : {"–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É –≤ –Ω–µ–¥–µ–ª—é" : {"ans1" : "–ú–µ–Ω—å—à–µ 5", "ans2" : "–û—Ç 5 –¥–æ 10", "ans3" : "–û—Ç 10 –¥–æ 15", "ans4" : "–û—Ç 15 –¥–æ 20", "ans5" : "–ë–æ–ª—å—à–µ 20"}},
    
}

def read_file(file_name):
    with open(file_name, 'r') as file:
        return file.read()

bot = telebot.TeleBot(read_file('token.ini'))

@bot.message_handler(commands=['start'])
def main(message):
    connect = sqlite3.connect('feedback.sql')
    cur = connect.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS student (chatid integer primary key, username varchar(50), fio varchar(80), specialization varchar(50), ciphergroup varchar(50))')
    cur.execute('CREATE TABLE IF NOT EXISTS education (id integer primary key, chatid integer, semester text, discipline text, question1 text, question2 text, question3 text, question4 text, question5 text, summary text, FOREIGN KEY(chatid) REFERENCES student(chatid))')
    cur.execute('CREATE TABLE IF NOT EXISTS practice (id integer primary key, chatid integer, semester text, question1 text, question2 text, question3 text, question4 text, question5 text, summary text, FOREIGN KEY(chatid) REFERENCES student(chatid))')
    cur.execute('INSERT OR IGNORE INTO student (chatid, username) VALUES (%d, "%s")' % (message.chat.id, message.chat.username))
       
    connect.commit()
    check_user = cur.execute('SELECT fio, specialization, ciphergroup FROM student WHERE chatid= %d' % message.chat.id).fetchone()
    cur.close()
    connect.close()
    
    if check_user[0] is None and check_user[1] is None and check_user[2] is None:
        btn = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='registration')
        first_message = f'üëãüèª –ü—Ä–∏–≤–µ—Ç! \n\n–¢—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
    else:
        btn = types.InlineKeyboardButton('–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', callback_data='complete_the_survey')
        first_message = f'–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ.'
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(btn)
    bot.send_message(message.chat.id, first_message, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda callback: True)
def survey(callback):
    if callback.data == 'complete_the_survey':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        semester_choice(callback)
    elif callback.data == 'registration':
        registration(callback)
    elif callback.data == '09.04.04_04':
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE student SET specialization = "%s" WHERE chatid = %d ' % (callback.data, callback.message.chat.id))
        connect.commit()
        cur.close()
        connect.close()
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        keyboard = group_code_buttons(callback.data)
        bot.send_message(callback.message.chat.id, '–¢—ã –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "–ò–¢ ‚Äì –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è".\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)
    elif callback.data == '01.04.03_04' or callback.data == '01.04.03_06' or callback.data == '10.04.01_04' or callback.data == '38.04.01_30':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        # –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        keyboard = specializations_buttons()
        bot.send_message(callback.message.chat.id, '–û–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–¢-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', reply_markup=keyboard)
    elif callback.data == '1_course':
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        specialization = cur.execute('SELECT specialization FROM student WHERE chatid = %d' % callback.message.chat.id).fetchone()
        cur.execute('UPDATE student SET ciphergroup = "%s" WHERE chatid = %d ' % (GROUPS[specialization[0]][callback.data], callback.message.chat.id))
        connect.commit()
        cur.close()
        connect.close()
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        semester_choice(callback)
    elif callback.data == '2_course':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        # –≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø–∞—Ö
        keyboard = group_code_buttons('09.04.04_04') 
        bot.send_message(callback.message.chat.id, '–û–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –æ–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø—ã 5140904/40401', reply_markup=keyboard)
    elif callback.data == '1_semester':
        semester = callback.data[:callback.data.find('_')]
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        check = cur.execute('SELECT id FROM education WHERE chatid = %d AND semester = "%s" AND discipline IS NULL' % (callback.message.chat.id, semester)).fetchone()
        check_practice = cur.execute('SELECT id FROM practice WHERE chatid = %d AND semester = "%s"' % (callback.message.chat.id, semester)).fetchone()
        print(semester)
        print(check)
        
        print('-------------------------------------')
        
        print(check_practice)
        if check ==  None:
            cur.execute('INSERT OR IGNORE INTO education (id, chatid, semester) VALUES (NULL, %d, %s)' % (callback.message.chat.id, semester))
        if check_practice == None:
            cur.execute('INSERT OR IGNORE INTO practice (chatid, semester) VALUES (%d, "%s")' % (callback.message.chat.id, semester))
        connect.commit()
        cur.close()
        connect.close()
        bot.delete_message(callback.message.chat.id, callback.message.message_id) 
        discplines_choice(callback, semester) 
    elif callback.data == '2_semester' or callback.data == '3_semester' or callback.data == '4_semester':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for key in DISCIPLINES.keys():
            callback_message = key + '_semester'
            keyboard.add(types.InlineKeyboardButton(key, callback_data=callback_message))
        bot.send_message(callback.message.chat.id, '–û–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –æ–ø—Ä–æ—Å –¥–ª—è 1-–≥–æ —Å–µ–º–µ—Ç—Ä–∞', reply_markup=keyboard)
    elif [key for key, val in DISCIPLINES.items() if callback.data in val]: 
        bot.edit_message_text(f'–¢—ã –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç <b>{callback.data}</b>', callback.message.chat.id, callback.message.message_id, parse_mode="html")
        print(callback.data)
        if callback.data != '–û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞':
            connect = sqlite3.connect('feedback.sql')
            cur = connect.cursor()
            semester = cur.execute('SELECT semester FROM education WHERE chatid = %d AND discipline IS NULL' % (callback.message.chat.id)).fetchone()
            check = cur.execute('SELECT * FROM education WHERE chatid = %d AND semester = "%s" AND discipline = "%s"' % (callback.message.chat.id, semester[0], callback.data))
            if len(check.fetchall()) == 0:
                cur.execute('UPDATE education SET discipline = "%s" WHERE chatid = %d AND semester = "%s" AND discipline IS NULL' % (callback.data, callback.message.chat.id, semester[0]))
            connect.commit()
            cur.close()
            connect.close()
            global discipline 
            discipline = callback.data
            education_survey(callback, discipline)
        else:
            connect = sqlite3.connect('feedback.sql')
            cur = connect.cursor()
            semester = cur.execute('SELECT semester FROM practice WHERE chatid = %d' % (callback.message.chat.id)).fetchone()
            cur.close()
            connect.close()
            practice_survey(callback, semester[0])
    elif callback.data == 'answer1' or callback.data == 'answer2' or callback.data == 'answer3' or callback.data == 'answer4' or callback.data == 'answer5':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        for key, values in QUESTIONS_EDUCATION.items():
            if list(QUESTIONS_EDUCATION[key].keys())[0] == callback.message.text:
                question_n = key 
                break
        answer = QUESTIONS_EDUCATION[question_n][callback.message.text][callback.data]
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE education SET "%s" = "%s" WHERE chatid = %d and "%s" IS NULL and discipline = "%s"' % (question_n, answer, callback.message.chat.id, question_n, discipline))
        connect.commit()
        cur.close()
        connect.close()
        education_survey(callback, discipline)
    elif callback.data == 'ans1' or callback.data == 'ans2' or callback.data == 'ans3' or callback.data == 'ans4' or callback.data == 'ans5':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        for key, values in QUESTIONS_PRACTICE.items():
            if list(QUESTIONS_PRACTICE[key].keys())[0] == callback.message.text:
                question_n = key 
                break
        answer = QUESTIONS_PRACTICE[question_n][callback.message.text][callback.data]
        semester = semester_info(callback.message.chat.id)
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE practice SET "%s" = "%s" WHERE chatid = %d and "%s" IS NULL and semester = "%s"' % (question_n, answer, callback.message.chat.id, question_n, semester))
        connect.commit()
        cur.close()
        connect.close()
        practice_survey(callback, semester)
        
def register_fio(callback):
    connect = sqlite3.connect('feedback.sql')
    cur = connect.cursor()
    cur.execute('UPDATE student SET fio = "%s" WHERE chatid = %d ' % (callback.text, callback.chat.id))
    connect.commit()
    cur.close()
    connect.close()
    specialization_choice(callback)
    

def registration(callback):
    bot.edit_message_text('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –§–ò–û', callback.message.chat.id, callback.message.message_id)
    bot.register_next_step_handler(callback.message, register_fio)

  
def specialization_choice(callback):
    keyboard = specializations_buttons()
    bot.send_message(callback.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=keyboard)       
    

def semester_choice(callback):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key in DISCIPLINES.keys():
        callback_message = key + '_semester'
        keyboard.add(types.InlineKeyboardButton(key, callback_data=callback_message))
    bot.send_message(callback.message.chat.id, '–û –∫–∞–∫–æ–º —Å–µ–º–µ—Å—Ç—Ä–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?', reply_markup=keyboard)
    
               
def discplines_choice(callback, semester):
    keyboard = discplines_button(semester)
    bot.send_message(callback.message.chat.id, f'–¢—ã –≤—ã–±—Ä–∞–ª <b>{semester}</b> —Å–µ–º–µ—Å—Ç—Ä.\n\n–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.', parse_mode="html", reply_markup=keyboard)


def specializations_buttons():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key, value in SPECIALIZATIONS.items():
        callback_message = key
        keyboard.add(types.InlineKeyboardButton(value, callback_data = callback_message))
    return keyboard
    
    
def group_code_buttons(group_code):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key, value in GROUPS[group_code].items():
        callback_message = key
        keyboard.add(types.InlineKeyboardButton(value, callback_data = callback_message))
    return keyboard


def discplines_button(semester):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for discipline in DISCIPLINES[semester]:
        keyboard.add(types.InlineKeyboardButton(discipline, callback_data = discipline))
    return keyboard
        

def education_survey(callback, discipline):
    connect = sqlite3.connect('feedback.sql')
    cur = connect.cursor()
    question_list = cur.execute('SELECT question1, question2, question3, question4, question5 FROM education WHERE discipline = "%s" AND chatid = %d' % (discipline, callback.message.chat.id)).fetchone()
    summary = cur.execute('SELECT summary FROM education WHERE discipline = "%s" AND chatid = %d' % (discipline, callback.message.chat.id)).fetchone()
    cur.close()
    connect.close()
    if None in question_list:
        for el in question_list:
            if el == None:
                question = "question" + str(question_list.index(el)+1)
                break
        questions = QUESTIONS_EDUCATION[question].keys()
        que = list(questions)[0]
        answers = QUESTIONS_EDUCATION[question][que]
        keyboard = answer_buttons(answers)
        bot.send_message(callback.message.chat.id, que, reply_markup=keyboard)
    elif None in summary:
        bot.send_message(callback.message.chat.id, f"–û—Å—Ç–∞–≤—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ - <b>{discipline}</b>.\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –æ–∂–∏–¥–∞–Ω–∏—è—Ö, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º üìÑ \n–∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§", parse_mode="html")
        bot.register_next_step_handler(callback.message, education_summary_register)
    else:   
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º", callback_data = "1_course"))
        bot.send_message(callback.message.chat.id, f"‚úÖ –¢—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ - <b>{discipline}</b>", parse_mode="html", reply_markup=keyboard)
        
    
def practice_survey(callback, semester):
    connect = sqlite3.connect('feedback.sql')
    cur = connect.cursor()
    question_list = cur.execute('SELECT question1, question2, question3, question4, question5 FROM practice WHERE chatid = %d AND semester = "%s"' % (callback.message.chat.id, semester)).fetchone()
    summary = cur.execute('SELECT summary FROM practice WHERE semester = "%s" AND chatid = %d' % (semester, callback.message.chat.id)).fetchone()
    cur.close()
    connect.close()
    print(question_list)
    if None in question_list:
        for el in question_list:
            if el == None:
                question = "question" + str(question_list.index(el)+1)
                break
        questions = QUESTIONS_PRACTICE[question].keys()
        que = list(questions)[0]
        answers = QUESTIONS_PRACTICE[question][que]
        keyboard = answer_buttons(answers)
        bot.send_message(callback.message.chat.id, que, reply_markup=keyboard)
    elif None in summary:
        bot.send_message(callback.message.chat.id, f"–û—Å—Ç–∞–≤—å —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ –æ <b>–ø—Ä–∞–∫—Ç–∏–∫–µ</b>.\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –æ–∂–∏–¥–∞–Ω–∏—è—Ö, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å.\n–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º üìÑ \n–∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§", parse_mode="html")
        bot.register_next_step_handler(callback.message, practice_summary_register)
    else:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º", callback_data = "1_course"))
        bot.send_message(callback.message.chat.id, f"‚úÖ –¢—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å –æ <b>–ø—Ä–∞–∫—Ç–∏–∫–µ</b>", parse_mode="html", reply_markup=keyboard)
    
    
def answer_buttons(answers):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key, value in answers.items():
        keyboard.add(types.InlineKeyboardButton(value, callback_data = key))
    return keyboard


def mp3_to_text_with_punctuation(mp3_file):
    model = whisper.load_model("./whisper/medium.pt") 
    result = model.transcribe(mp3_file, language="ru")
    return result["text"]


def education_summary_register(message):
    if message.content_type == "voice":
        SAVE_DIR = "voice_msg" 
        if not os.path.exists(SAVE_DIR):
            os.makedirs(SAVE_DIR)
        file_info = bot.get_file(message.voice.file_id) 
        file_url = f"https://api.telegram.org/file/bot{read_file('token.ini')}/{file_info.file_path}"
        
        file_path_voice = f"voice_msg/voice_{message.message_id}.ogg"
        file_path = os.path.join(SAVE_DIR, f"voice_{message.message_id}.ogg")
        
        response = requests.get(file_url)
        
        with open(file_path, "wb") as f:
            f.write(response.content)
        
        text_result = mp3_to_text_with_punctuation(file_path_voice)
        os.remove(file_path)
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE education SET summary = "%s" WHERE chatid = %d and summary IS NULL and discipline = "%s"' % (text_result, message.chat.id, discipline))
        connect.commit()
        cur.close()
        connect.close()
    elif message.content_type == "text":
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE education SET summary = "%s" WHERE chatid = %d and summary IS NULL and discipline = "%s"' % (message.text, message.chat.id, discipline))
        connect.commit()
        cur.close()
        connect.close()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º", callback_data = "1_course"))
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ - <b>{discipline}</b>", parse_mode="html", reply_markup=keyboard)


def practice_summary_register(message):
    semester = semester_info(message.chat.id)
    if message.content_type == "voice":
        SAVE_DIR = "voice_msg" 
        if not os.path.exists(SAVE_DIR):
            os.makedirs(SAVE_DIR)
        file_info = bot.get_file(message.voice.file_id) 
        file_url = f"https://api.telegram.org/file/bot{read_file('token.ini')}/{file_info.file_path}"
        
        file_path_voice = f"voice_msg/voice_{message.message_id}.ogg"
        file_path = os.path.join(SAVE_DIR, f"voice_{message.message_id}.ogg")
        
        response = requests.get(file_url)
        
        with open(file_path, "wb") as f:
            f.write(response.content)
        
        text_result = mp3_to_text_with_punctuation(file_path_voice)
        os.remove(file_path)
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE practice SET summary = "%s" WHERE chatid = %d and summary IS NULL and semester = "%s"' % (text_result, message.chat.id, semester))
        connect.commit()
        cur.close()
        connect.close()
    elif message.content_type == "text":
        connect = sqlite3.connect('feedback.sql')
        cur = connect.cursor()
        cur.execute('UPDATE practice SET summary = "%s" WHERE chatid = %d and summary IS NULL and semester = "%s"' % (message.text, message.chat.id, semester))
        connect.commit()
        cur.close()
        connect.close()
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º", callback_data = "1_course"))
    bot.send_message(message.chat.id, f"‚úÖ –¢—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å –æ <b>–ø—Ä–∞–∫—Ç–∏–∫–µ</b>", parse_mode="html", reply_markup=keyboard)

def semester_info(chat_id):
    connect = sqlite3.connect('feedback.sql')
    cur = connect.cursor()
    semester = cur.execute('SELECT semester FROM practice WHERE chatid = %d AND semester NOT NULL' % (chat_id)).fetchone()
    cur.close()
    connect.close()
    return semester[0]
    

bot.infinity_polling(timeout=10, long_polling_timeout = 5)